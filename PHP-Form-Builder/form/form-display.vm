#set ( $callingPageData = $_XPathTool.selectSingleNode($contentRoot, "/system-index-block/calling-page/system-page") )
#set ( $callingPageStructure = $_XPathTool.selectSingleNode($callingPageData, "system-data-structure") )
#set ( $formConfigContent = $_XPathTool.selectSingleNode($callingPageData, "system-data-structure/resultsFile/form-config/content/system-data-structure"))
#set ( $formItems = $_XPathTool.selectNodes($callingPageStructure, "form_item") )
#set ( $waysToSave = $_XPathTool.selectNodes($callingPageData, "system-data-structure/results/value"))
#set ( $dataDefType = $_XPathTool.selectSingleNode($callingPageData, "system-data-structure/resultsFile/dataDefType").value)

#set ( $emailSend = "false")
#set ( $excelSave = "false")
#set ( $cmsSave = "false")
#foreach ($wayToSave in $waysToSave)
    #if ($wayToSave.text == "send-email")
        #set ( $emailSend = "true")
    #elseif ($wayToSave.text == "save-to-excel")
        #set ( $excelSave = "true")
    #elseif ($wayToSave.text == "save-to-cms")
        #set ( $cmsSave = "true")
    #end
#end
#set($validFormFields="#buildValidFormFieldsArray()")
[system-view:external]
<?php
    #if( $wayToSave.text == "save-to-excel" || $wayToSave.text == "save-to-cms")
        define("AUTH_FILE_PATH", "${formConfigContent.getChild('authFilePath').text}");
    #end
    error_reporting(E_ALL);
  if (count($_POST) > 0) { //POSTED FORM, PROCESS IT
    $message = "";
    $subject = "${callingPageData.getChild('system-data-structure').getChild('ifEmailing').getChild('emailHeading').text}";
    $email_from = "${callingPageData.getChild('system-data-structure').getChild('ifEmailing').getChild('fromAddress').text}";
    $email_to = "";
    $sendEmail = ${emailSend};
    $excelFile = ${excelSave};
    $cmsFile = ${cmsSave};

    $excelFirstRow = array();           // Holds the contents of the first row in the Excel file.
    $excelThisRow = array();            // Holds the contents of this submission's row in the Excel file.
    $page = array();                    // Holds the data required to save the submission as a page within the CMS.

    $form_fields = array();             // Holds the field names of all fields provided in the submitted data.
    $form_submitted = true;             // Indicates if the form can be submitted or if it had data entry errors.
    $form_values = array();             // Holds the values of all fields provided in the submitted data.
    $required_fields = array();         // Holds the field names of fields that are required.
    $invalid_fields = array();          // Holds invalid fields that were found (ie extra POST data).
    $valid_fields = array(${validFormFields.trim()});   // Holds valid form fields that are allowed to be submitted.

    $unsatisfied_fields_message = "";   // Message indicating any unsatisfied required fields.

    // Helper array containing POST elements to skip during processing.
    $postKeysToSkip = array(
      "send-email", "save-to-cms", "save-to-excel", "form-config", "emails"
    );

    function getParentFolderOutOfPath($path){
      return substr($path, 0, strripos($path,'/'));
    }

    // Helper function used for escaping CSV content.
    function arrayToCSV($fields, $delimiter = ',', $enclosure = '"') {
      $str = '';

      foreach ($fields as $cell) {
        $cell = str_replace($enclosure, $enclosure . $enclosure, $cell);

        if (strchr($cell, $delimiter) !== false ||
            strchr($cell, $enclosure) !== false ||
            strchr($cell, "\n") !== false) {
          $str .= $enclosure . $cell . $enclosure . $delimiter;
        } else {
          $str .= $cell . $delimiter;
        }
      }

      return substr($str, 0, -1) . "\n";
    }

    // Pull the required fields array out of POST.
    $required_fields = $_POST['REQUIRED'];
    unset($_POST['REQUIRED']);

    // Go through each POST element and add the information to the message and to the content of the xml file
    foreach ($_POST as $key => $value) {
      // Make sure this is a form field and not a configuration variable.
      if (in_array($key, $postKeysToSkip)) {
        continue;
      }

      // If this field is not a form field, flag it.
      if (!array_key_exists($key, $valid_fields)) {
        $invalid_fields[$key] = $valid_fields[$key];
        continue;
      }

      // If the field is an array, combine the values.
      if (is_array($value)){
        $value = implode(", ", $value);
      }

      // Perform some value sanitization.
      $value = strip_tags(stripslashes($value));

      // Record the field and add to the message string.
      ${_EscapeTool.d}form_fields[$key] = $value;
      $message .= $key . ": " . $value . "<br/>";

      if ($cmsFile) {
      #if($dataDefType != "Generic")
        // use this for custom data definition output
           ${_EscapeTool.d}page['structuredData']['structuredDataNodes']['structuredDataNode'][] = array(
            'identifier' => $key,
            'type' => 'text',
            'text' => $value
        );
      #else
        // use this for generic data definition output:
        // <system-data-structure>
        //    <group identifier="field" multiple="true">
        //        <text identifier="id"/>
        //        <text identifier="value"/>
        //    </group>
        // </system-data-structure>
        ${_EscapeTool.d}page['structuredData']['structuredDataNodes']['structuredDataNode'][] = array(
          'identifier' => 'field',
          'type' => 'group',
          'structuredDataNodes' => array(
            'structuredDataNode' => array(
              array(
                'identifier' => 'id',
                'text' => $key,
                'type' => 'text'),
              array(
                'identifier' => 'value',
                'text' => $value,
                'type' => 'text')
            )
          )
        );
      #end
      }

      if ($excelFile) {
        ${_EscapeTool.d}excelFirstRow[$key] = $key;
        ${_EscapeTool.d}excelThisRow[$key] = $value;
      }
    }

    // Were invalid fields encountered? If so, display an error message.
    // Else, check required fields to make sure they are valid.
    if (count($invalid_fields) > 0) {
      echo "<p><strong>Error: The following invalid fields were encountered and do not match the original form data:</strong></p>";
      echo "<ul><li>".implode("</li><li>", $invalid_fields)."</li></ul>";
      echo "<p><strong>The form's data was not sent. Please hit the 'Back' button and resubmit the form.</strong></p>";

      // Update the form submission flag due to the failed validation.
      $form_submitted = false;
    } else {
      foreach ($required_fields as $field) {
        // If the field is not present or its value is empty, mark it as unsatisfied.
        if (!array_key_exists($field, $form_fields) || empty($form_fields[$field])) {
          $unsatisfied_fields_message .= "<li>".$field."</li>";
        }
      }

      // Display an error message if required fields were not met.
      if (!empty($unsatisfied_fields_message)) {
        echo "<p><strong>Error: The following required fields were not provided:</strong></p>";
        echo "<ul>".$unsatisfied_fields_message."</ul>";
        echo "<p><strong>The form's data was not sent. Please hit the 'Back' button, fill in the required fields mentioned above, and resubmit the form.</strong></p>";

        // Update the form submission flag due to the failed validation.
        $form_submitted = false;
      }
    }

    if ($form_submitted) {
      // If the send email option was chosen, send the email.
      if ($sendEmail) {
        #set ( $emailAddresses = $_XPathTool.selectNodes($callingPageData, "system-data-structure/ifEmailing/email-address"))
        $email_to = "#foreach ( $email in $emailAddresses)$email.value#if ($foreach.hasNext), #end#end";
        $headers  = 'MIME-Version: 1.0' . "\r\n";
        $headers .= 'Content-type: text/html; charset=iso-8859-1' . "\r\n";
        $headers .= 'From: ' . $email_from . ' <' . $email_from . '>' . " \r\n";

        // Attempt to send the email.
        if (!mail($email_to,$subject,$message,$headers)) {
          // If the email failed, notify the user.
          echo "Error: Email could not be sent...<br />";
        }
      }
      
      // If CMS file or Excel file option was chosen, get CMS information
      if ($cmsFile || $excelFile) {
        @include(AUTH_FILE_PATH);

        // If the authentication information is not set after including the authenication file, notify to the user.
        if (!isset($auth) || !is_array($auth) || !array_key_exists("username", $auth) || !array_key_exists("password", $auth)) {
          print("Error: There was a problem recording your request. Missing API information.<br />");
        } else {
          $cascade_address = "${formConfigContent.getChild('cascadeAddress').text}";
          $fname = "${callingPageData.getChild('system-data-structure').getChild('resultsFile').getChild('xmlFileName').text}";
          $siteName = "${formConfigContent.getChild('siteName').text}";
          $client = new SoapClient($cascade_address."/ws/services/AssetOperationService?wsdl", array('trace' => 1));

          // If CMS File option was chosen, upload to CMS
          if ($cmsFile) {
            $path = "${callingPageData.getChild('system-data-structure').getChild('resultsFile').getChild('formPath').getChild('path').text}";
            if (!is_null($path) AND ($path != "/")) {
              $folder = getParentFolderOutOfPath($path);
              try {
                $page['name'] = $fname;
                $page['parentFolderPath'] = $folder;
                $page['contentTypePath'] = "${formConfigContent.getChild('contentTypePath').text}";
                $page['siteName'] = $siteName;

                $create_params = array(
                  'authentication' => $auth,
                  'asset' => array(
                    'page' => $page
                    // Uncomment this section if a workflow should be started on creation of a page in Cascade using the form.
                    // WorkflowName can be whatever the user wants.
                    // WorkflowDefinitionPath should be the Workflow to be started.
                    // WorkflowComments may be modified as well.
                    /*,
                    'workflowConfiguration' => array(
                      'workflowName' => 'New Item',
                      'workflowDefinitionPath' => 'Create-Edit Workflow',
                      'workflowComments' => 'Asset created by outside user.'
                    )*/
                   )
                );
                try {
                  $client->create($create_params);
                } catch (Exception $e) {
                  print_r($client->__getLastResponse());
                  print ($e->getMessage());
                  print("Error: File creation request failed to conform to the WSDL.<br />");
                }
              } catch (Exception $e) {
                print_r($client->__getLastResponse());
                print("Error: File creation request failed to conform to the WSDL.<br />");
              }
            }
          }

          // If Excel option was chosen, upload Excel file to CMS
          if ($excelFile) {
            $path = "${callingPageData.getChild('system-data-structure').getChild('resultsFile').getChild('formPath').getChild('path').text}";
            if (($path != "") AND ($path != "/")) {
              $folder = getParentFolderOutOfPath($path);
              $csvFileName = $fname . ".csv";
              $csvContent = "";

              $response = $client->read(array(
                'authentication' => $auth,
                'identifier' => array(
                  'path' => array(
                    'path' => $folder . "/" . $csvFileName,
                    'siteName' => $siteName
                  ),
                  'type' => "file"
                )
              ));

              try {
                if ($response->readReturn->success == "true") {
                  $csvContent = $response->readReturn->asset->file->data;

                  if ($csvContent == "") {
                    $csvContent .= arrayToCSV($excelFirstRow);
                  }
                  $csvContent .= arrayToCSV($excelThisRow);

                  try {
                    $response = $client->edit(array(
                    'authentication' => $auth,
                    'asset' => array(
                      'file' => array(
                        'name' => $csvFileName,
                        'parentFolderPath' => $folder,
                        'metadataSetPath' => "/Default",
                        'path' => $folder . "/" . $csvFileName,
                        'siteName' => $siteName,
                        'data' => $csvContent
                      )
                    )
                  ));
                  } catch (Exception $e) {
                    print("Error: File update request failed to conform to the WSDL.<br />");
                  }
                } else {
                  $csvContent .= arrayToCSV($excelFirstRow);
                  $csvContent .= arrayToCSV($excelThisRow);

                  try {
                    $response = $client->create(array(
                    'authentication' => $auth,
                    'asset' => array(
                      'file' => array(
                        'name' => $csvFileName,
                        'parentFolderPath' => $folder,
                        'siteName' => $siteName,
                        'metadataSetPath' => "/Default",
                        'data' => $csvContent
                      )
                    )
                  ));
                  } catch (Exception $e) {
                    print("Error: File creation request failed to conform to the WSDL.<br />");
                  }
                }
              } catch (Exception $e) {
                print("Error: finding folder in CMS.<br />");
              }
            }
          }
        }
      }

      ?><!--#START-CODE<script type="text/javascript">
          window.location.href = window.location.href.replace('false', 'true');
      </script>#END-CODE--><?php
    }
  } elseif (isset($_GET['submitted']) AND $_GET['submitted'] == 'true') {  // No POST, form was submitted so show confirmation
    ?>${_SerializerTool.serialize($callingPageData.getChild('system-data-structure').getChild('confirmation_text'), true)}<?php
  } else { ?>
[/system-view:external]

<form action="[system-asset]${callingPageStructure.getChild('action').getChild('path').text}[/system-asset]?submitted=true" method="POST">
  ${_SerializerTool.serialize($callingPageStructure.getChild('opening'), true)}

  <table cellpadding="2" summary="FOR LAYOUT ONLY" width="100%">
  #foreach ($formItem in $formItems)
    #set ($name = "#sanitizeFormFieldName($formItem)")
    #set ($name = $name.trim())
    #set ($defaultValue = "#sanitizeFormFieldDefaultValue($formItem)")
    #set ($defaultValue = $defaultValue.trim())
    #set ($label = "#sanitizeFormFieldLabel($formItem)")
    #set ($label = $label.trim())
    #set ($formItemType = $formItem.getChild("type").text)
    #set ($isRequiredField = 'No')
    #set ($isRequiredField = $formItem.getChild("required").getChild("value").text)
    #if ($formItemType =='hidden')
      <input name="${name}" type="hidden" value="${formItemType}"/>
    #elseif ($formItemType == "paragraph text")
      <tr><td colspan="3">
        <p>${_EscapeTool.xml($formItem.getChild("content").text)}</p>
      </td></tr>
    #else
      <tr>
        <td width="25%">
          <label for="${name}">
            ${label}:#if ($isRequiredField == 'Yes')<span style="color:red">*</span>#end
          </label>
        </td>
        <td width="2%"/>
        <td width="70%">
          #if ($isRequiredField == "Yes")
            <input name="REQUIRED[]" type="hidden" value="${name.replaceAll("\[\]", "")}"/>
          #end
          #if ($formItemType == "dropdown")
            <select name="${name}">
              #set ( $selected = "" )
              #set ( $valuesWithinForm = $_XPathTool.selectNodes($formItem, "value[string(text()) != '']") )
              #foreach ($valueWithinForm in $valuesWithinForm)
                #if ($valueWithinForm.text == $defaultValue)
                  #set ($selected = " selected='selected'")
                #else
                  #set ( $selected = "" )
                #end
                <option value="${valueWithinForm.text}"${selected}>${valueWithinForm.text}</option>
              #end
            </select>
          #elseif ($formItemType == "checkbox" || $formItemType =="radio")
            #set ( $fieldId = "" )
            #set ( $checked = "" )
            #set ( $valuesWithinForm2 = $_XPathTool.selectNodes($formItem, "value[string(text()) != '']") )
            #foreach ($valueWithinForm2 in $valuesWithinForm2)
              #if ($foreach.index == 0)
                #set ($fieldId = $name)
              #else
                #set ($fieldId = "${name}_${foreach.index}")
              #end

              #if ($valueWithinForm2.text == $defaultValue)
                #set ($checked = " checked='checked'")
              #else
                #set ( $checked = "" )
              #end
              
              #if ($formItemType == "checkbox")
                  <input id="${fieldId}" name="${name}[]"${checked} type="${formItemType}" value="${valueWithinForm2.text}">$valueWithinForm2.text  </input>
              #else
                  <input id="${fieldId}" name="${name}"${checked} type="${formItemType}" value="${valueWithinForm2.text}">$valueWithinForm2.text  </input>
              #end
            #end
          #elseif ($formItemType == "textarea")
            <textarea cols="25" name="${name}" rows="5">${defaultValue}</textarea>
          #else
            <input id="${name}" name="${name}" type="${formItemType}" value="${defaultValue}"/>
          #end
        </td>
      </tr>
    #end
  #end
    <tr>
      <td colspan="2"/>
      <td><br/>
      #if ($callingPageStructure.getChild("submit_button_text").text != '')
        <input type="submit" value="${callingPageStructure.getChild('submit_button_text').text}"/>
      #else
        <input type="submit" />
      #end
      #if ($callingPageStructure.getChild("reset").getChild("value").text == 'true')
        <input type="reset" value="Reset Form"/>
      #end
      </td>
    </tr>
  </table>
</form>
[system-view:external]
<?php }//END NO-POST-FORM-SHOWING ?>
[/system-view:external]
#macro (buildValidFormFieldsArray)
  #foreach ($formItem in $formItems)
    #set ($name = "#sanitizeFormFieldName($formItem)")
    #set ($label = "#sanitizeFormFieldLabel($formItem)")
'${name.trim()}'=>'${_EscapeTool.javascript($label.trim())}'#if($foreach.hasNext),#end
  #end
#end
#macro (sanitizeFormFieldDefaultValue $field)
  $_EscapeTool.xml($field.getChild("default_value").text)
#end
#macro (sanitizeFormFieldLabel $field)
  #set ($label = "")
  #set ($label = $formItem.getChild("label").text)
  #if ($label && $label != "")
    ${_EscapeTool.xml($label)}
  #else
    ${_EscapeTool.xml($field.getChild("name").text)}
  #end
#end
#macro (sanitizeFormFieldName $field)
  $field.getChild("name").text.replaceAll("\W","_")
#end
